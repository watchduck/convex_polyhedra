#include "polyhedra_davinci.inc"


#declare Factor = .915;
#declare Abs = array[12]{ (1/(1/2 + sqrt(5)/2))*Factor, (2/(1/2 + sqrt(5)/2))*Factor, (1/2 + sqrt(5)/2)*Factor, (2)*Factor, (sqrt(5))*Factor, pow(1/2 + sqrt(5)/2, 2)*Factor, (3)*Factor, (1 + sqrt(5))*Factor, (sqrt(5)/2 + 5/2)*Factor, (1/2 + 3*sqrt(5)/2)*Factor, (2 + sqrt(5))*Factor, (sqrt(5)/2 + 7/2)*Factor, }

#declare P = array[120]{ <-Abs[11],-Abs[0],-Abs[0]>, <-Abs[11],-Abs[0],Abs[0]>, <-Abs[11],Abs[0],-Abs[0]>, <-Abs[11],Abs[0],Abs[0]>, <-Abs[10],-Abs[2],-Abs[1]>, <-Abs[10],-Abs[2],Abs[1]>, <-Abs[10],Abs[2],-Abs[1]>, <-Abs[10],Abs[2],Abs[1]>, <-Abs[9],-Abs[5],-Abs[0]>, <-Abs[9],-Abs[5],Abs[0]>, <-Abs[9],Abs[5],-Abs[0]>, <-Abs[9],Abs[5],Abs[0]>, <-Abs[8],-Abs[3],-Abs[4]>, <-Abs[8],-Abs[3],Abs[4]>, <-Abs[8],Abs[3],-Abs[4]>, <-Abs[8],Abs[3],Abs[4]>, <-Abs[7],-Abs[6],-Abs[2]>, <-Abs[7],-Abs[6],Abs[2]>, <-Abs[7],Abs[6],-Abs[2]>, <-Abs[7],Abs[6],Abs[2]>, <-Abs[6],-Abs[2],-Abs[7]>, <-Abs[6],-Abs[2],Abs[7]>, <-Abs[6],Abs[2],-Abs[7]>, <-Abs[6],Abs[2],Abs[7]>, <-Abs[5],-Abs[0],-Abs[9]>, <-Abs[5],-Abs[0],Abs[9]>, <-Abs[5],Abs[0],-Abs[9]>, <-Abs[5],Abs[0],Abs[9]>, <-Abs[4],-Abs[8],-Abs[3]>, <-Abs[4],-Abs[8],Abs[3]>, <-Abs[4],Abs[8],-Abs[3]>, <-Abs[4],Abs[8],Abs[3]>, <-Abs[3],-Abs[4],-Abs[8]>, <-Abs[3],-Abs[4],Abs[8]>, <-Abs[3],Abs[4],-Abs[8]>, <-Abs[3],Abs[4],Abs[8]>, <-Abs[2],-Abs[7],-Abs[6]>, <-Abs[2],-Abs[7],Abs[6]>, <-Abs[2],-Abs[1],-Abs[10]>, <-Abs[2],-Abs[1],Abs[10]>, <-Abs[2],Abs[1],-Abs[10]>, <-Abs[2],Abs[1],Abs[10]>, <-Abs[2],Abs[7],-Abs[6]>, <-Abs[2],Abs[7],Abs[6]>, <-Abs[1],-Abs[10],-Abs[2]>, <-Abs[1],-Abs[10],Abs[2]>, <-Abs[1],Abs[10],-Abs[2]>, <-Abs[1],Abs[10],Abs[2]>, <-Abs[0],-Abs[11],-Abs[0]>, <-Abs[0],-Abs[11],Abs[0]>, <-Abs[0],-Abs[9],-Abs[5]>, <-Abs[0],-Abs[9],Abs[5]>, <-Abs[0],-Abs[0],-Abs[11]>, <-Abs[0],-Abs[0],Abs[11]>, <-Abs[0],Abs[0],-Abs[11]>, <-Abs[0],Abs[0],Abs[11]>, <-Abs[0],Abs[9],-Abs[5]>, <-Abs[0],Abs[9],Abs[5]>, <-Abs[0],Abs[11],-Abs[0]>, <-Abs[0],Abs[11],Abs[0]>, <Abs[0],-Abs[11],-Abs[0]>, <Abs[0],-Abs[11],Abs[0]>, <Abs[0],-Abs[9],-Abs[5]>, <Abs[0],-Abs[9],Abs[5]>, <Abs[0],-Abs[0],-Abs[11]>, <Abs[0],-Abs[0],Abs[11]>, <Abs[0],Abs[0],-Abs[11]>, <Abs[0],Abs[0],Abs[11]>, <Abs[0],Abs[9],-Abs[5]>, <Abs[0],Abs[9],Abs[5]>, <Abs[0],Abs[11],-Abs[0]>, <Abs[0],Abs[11],Abs[0]>, <Abs[1],-Abs[10],-Abs[2]>, <Abs[1],-Abs[10],Abs[2]>, <Abs[1],Abs[10],-Abs[2]>, <Abs[1],Abs[10],Abs[2]>, <Abs[2],-Abs[7],-Abs[6]>, <Abs[2],-Abs[7],Abs[6]>, <Abs[2],-Abs[1],-Abs[10]>, <Abs[2],-Abs[1],Abs[10]>, <Abs[2],Abs[1],-Abs[10]>, <Abs[2],Abs[1],Abs[10]>, <Abs[2],Abs[7],-Abs[6]>, <Abs[2],Abs[7],Abs[6]>, <Abs[3],-Abs[4],-Abs[8]>, <Abs[3],-Abs[4],Abs[8]>, <Abs[3],Abs[4],-Abs[8]>, <Abs[3],Abs[4],Abs[8]>, <Abs[4],-Abs[8],-Abs[3]>, <Abs[4],-Abs[8],Abs[3]>, <Abs[4],Abs[8],-Abs[3]>, <Abs[4],Abs[8],Abs[3]>, <Abs[5],-Abs[0],-Abs[9]>, <Abs[5],-Abs[0],Abs[9]>, <Abs[5],Abs[0],-Abs[9]>, <Abs[5],Abs[0],Abs[9]>, <Abs[6],-Abs[2],-Abs[7]>, <Abs[6],-Abs[2],Abs[7]>, <Abs[6],Abs[2],-Abs[7]>, <Abs[6],Abs[2],Abs[7]>, <Abs[7],-Abs[6],-Abs[2]>, <Abs[7],-Abs[6],Abs[2]>, <Abs[7],Abs[6],-Abs[2]>, <Abs[7],Abs[6],Abs[2]>, <Abs[8],-Abs[3],-Abs[4]>, <Abs[8],-Abs[3],Abs[4]>, <Abs[8],Abs[3],-Abs[4]>, <Abs[8],Abs[3],Abs[4]>, <Abs[9],-Abs[5],-Abs[0]>, <Abs[9],-Abs[5],Abs[0]>, <Abs[9],Abs[5],-Abs[0]>, <Abs[9],Abs[5],Abs[0]>, <Abs[10],-Abs[2],-Abs[1]>, <Abs[10],-Abs[2],Abs[1]>, <Abs[10],Abs[2],-Abs[1]>, <Abs[10],Abs[2],Abs[1]>, <Abs[11],-Abs[0],-Abs[0]>, <Abs[11],-Abs[0],Abs[0]>, <Abs[11],Abs[0],-Abs[0]>, <Abs[11],Abs[0],Abs[0]>, }


#declare UncoloredEdges = array[180]{array[2]{69, 75}, array[2]{11, 19}, array[2]{39, 53}, array[2]{102, 110}, array[2]{56, 68}, array[2]{92, 94}, array[2]{69, 83}, array[2]{38, 52}, array[2]{104, 112}, array[2]{89, 101}, array[2]{82, 86}, array[2]{76, 84}, array[2]{21, 33}, array[2]{111, 115}, array[2]{44, 50}, array[2]{8, 9}, array[2]{83, 87}, array[2]{99, 107}, array[2]{13, 21}, array[2]{91, 103}, array[2]{23, 35}, array[2]{68, 82}, array[2]{88, 100}, array[2]{10, 18}, array[2]{81, 95}, array[2]{34, 40}, array[2]{60, 61}, array[2]{63, 73}, array[2]{14, 18}, array[2]{8, 16}, array[2]{68, 74}, array[2]{48, 60}, array[2]{28, 44}, array[2]{4, 8}, array[2]{27, 41}, array[2]{34, 42}, array[2]{5, 13}, array[2]{116, 117}, array[2]{72, 88}, array[2]{49, 61}, array[2]{100, 104}, array[2]{6, 10}, array[2]{33, 39}, array[2]{101, 109}, array[2]{86, 98}, array[2]{62, 76}, array[2]{23, 27}, array[2]{118, 119}, array[2]{45, 49}, array[2]{29, 45}, array[2]{64, 66}, array[2]{57, 69}, array[2]{3, 7}, array[2]{43, 57}, array[2]{97, 105}, array[2]{114, 118}, array[2]{62, 72}, array[2]{19, 31}, array[2]{55, 67}, array[2]{103, 111}, array[2]{80, 86}, array[2]{30, 42}, array[2]{93, 95}, array[2]{115, 119}, array[2]{46, 58}, array[2]{84, 96}, array[2]{87, 99}, array[2]{76, 88}, array[2]{117, 119}, array[2]{103, 107}, array[2]{61, 73}, array[2]{116, 118}, array[2]{81, 87}, array[2]{65, 67}, array[2]{12, 20}, array[2]{25, 27}, array[2]{77, 85}, array[2]{95, 99}, array[2]{82, 90}, array[2]{31, 43}, array[2]{6, 14}, array[2]{35, 41}, array[2]{59, 71}, array[2]{24, 26}, array[2]{22, 34}, array[2]{35, 43}, array[2]{40, 54}, array[2]{108, 112}, array[2]{26, 40}, array[2]{78, 92}, array[2]{47, 59}, array[2]{110, 114}, array[2]{101, 105}, array[2]{70, 71}, array[2]{17, 29}, array[2]{46, 56}, array[2]{32, 36}, array[2]{2, 6}, array[2]{106, 114}, array[2]{85, 97}, array[2]{12, 16}, array[2]{2, 3}, array[2]{92, 96}, array[2]{78, 84}, array[2]{31, 47}, array[2]{100, 108}, array[2]{66, 80}, array[2]{94, 98}, array[2]{1, 3}, array[2]{58, 59}, array[2]{83, 91}, array[2]{58, 70}, array[2]{4, 12}, array[2]{16, 28}, array[2]{0, 2}, array[2]{7, 11}, array[2]{80, 94}, array[2]{54, 66}, array[2]{93, 97}, array[2]{51, 63}, array[2]{13, 17}, array[2]{30, 46}, array[2]{48, 49}, array[2]{112, 116}, array[2]{22, 26}, array[2]{79, 85}, array[2]{53, 65}, array[2]{53, 55}, array[2]{107, 115}, array[2]{25, 39}, array[2]{20, 24}, array[2]{24, 38}, array[2]{108, 109}, array[2]{15, 19}, array[2]{36, 50}, array[2]{70, 74}, array[2]{41, 55}, array[2]{32, 38}, array[2]{5, 9}, array[2]{102, 106}, array[2]{64, 78}, array[2]{20, 32}, array[2]{45, 51}, array[2]{42, 56}, array[2]{9, 17}, array[2]{29, 37}, array[2]{98, 106}, array[2]{74, 90}, array[2]{18, 30}, array[2]{52, 54}, array[2]{113, 117}, array[2]{14, 22}, array[2]{33, 37}, array[2]{105, 113}, array[2]{110, 111}, array[2]{21, 25}, array[2]{52, 64}, array[2]{60, 72}, array[2]{96, 104}, array[2]{109, 113}, array[2]{67, 81}, array[2]{73, 89}, array[2]{71, 75}, array[2]{0, 1}, array[2]{47, 57}, array[2]{44, 48}, array[2]{79, 93}, array[2]{90, 102}, array[2]{63, 77}, array[2]{37, 51}, array[2]{77, 89}, array[2]{15, 23}, array[2]{65, 79}, array[2]{0, 4}, array[2]{7, 15}, array[2]{50, 62}, array[2]{28, 36}, array[2]{75, 91}, array[2]{10, 11}, array[2]{1, 5}};


#declare FaceNormalPoints = array[62]{<(-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*Factor, <sqrt(5)*(1 + sqrt(5))/2, 0, sqrt(5)>*Factor, <-sqrt(5), -5/2 - sqrt(5)/2, 0>*Factor, <(-1 + sqrt(5))*(sqrt(5)/4 + 5/4), -5/2 - sqrt(5)/2, 0>*Factor, <(-1 + sqrt(5))*(sqrt(5)/4 + 5/4), sqrt(5)/2 + 5/2, 0>*Factor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <0, (-7/4 - 3*sqrt(5)/4)*(-1 + sqrt(5)), 2*(-2 + sqrt(5))*(-7/4 - 3*sqrt(5)/4)>*Factor, <(-3 + sqrt(5))*(3*sqrt(5)/4 + 7/4), (-sqrt(5) + 3)*(3*sqrt(5)/4 + 7/4), (-3 + sqrt(5))*(3*sqrt(5)/4 + 7/4)>*Factor, <0, (-3*sqrt(5)/4 + 5/4)*(sqrt(5) + 3), 2*(2 + sqrt(5))*(-3*sqrt(5)/4 + 5/4)>*Factor, <4*(-sqrt(5) + 2)*(3*sqrt(5)/8 + 7/8), 0, 2*(-sqrt(5) + 1)*(3*sqrt(5)/8 + 7/8)>*Factor, <0, 2*(-1 + sqrt(5))*(sqrt(5)/8 + 5/8), -5/2 - sqrt(5)/2>*Factor, <-sqrt(5)*(1 + sqrt(5))/2, 0, -sqrt(5)>*Factor, <0, (-3*sqrt(5)/4 + 5/4)*(sqrt(5) + 3), -2*(2 + sqrt(5))*(-3*sqrt(5)/4 + 5/4)>*Factor, <2*sqrt(5)*(1/4 + sqrt(5)/4), 0, (-5 + sqrt(5))*(1/4 + sqrt(5)/4)>*Factor, <0, 0, 2*(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8)>*Factor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8)>*Factor, <4*(-2 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <2*(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 2), 0, (-7/4 - 3*sqrt(5)/4)*(-1 + sqrt(5))>*Factor, <0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1), 4*(-2 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*Factor, <(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4)>*Factor, <0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2)>*Factor, <-sqrt(5)*(1 + sqrt(5))/2, 0, sqrt(5)>*Factor, <(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3)>*Factor, <0, 2*(-1 + sqrt(5))*(sqrt(5)/8 + 5/8), sqrt(5)/2 + 5/2>*Factor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*Factor, <0, 0, 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*Factor, <2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*Factor, <(-1 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 2*(-sqrt(5) + 2)*(3*sqrt(5)/4 + 7/4), 0>*Factor, <(-sqrt(5) + 1)*(3*sqrt(5)/4 + 7/4), 2*(-sqrt(5) + 2)*(3*sqrt(5)/4 + 7/4), 0>*Factor, <2*(-sqrt(5) + 3)*(3*sqrt(5)/8 + 7/8), 2*(-3 + sqrt(5))*(3*sqrt(5)/8 + 7/8), 2*(-3 + sqrt(5))*(3*sqrt(5)/8 + 7/8)>*Factor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*Factor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*Factor, <0, 2*(-1 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2)>*Factor, <(-1 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 2*(-2 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 0>*Factor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2)>*Factor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*Factor, <0, 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 0>*Factor, <(-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4), (-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3)>*Factor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 0, 0>*Factor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*Factor, <(-sqrt(5) + 1)*(sqrt(5)/4 + 5/4), sqrt(5)/2 + 5/2, 0>*Factor, <4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2), 0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4), 3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4), 3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4)>*Factor, <(-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*Factor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5))>*Factor, <2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*Factor, <(-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*Factor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*Factor, <2*(-1 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2), 0>*Factor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*Factor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*Factor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*Factor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <0, 2*(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 0>*Factor, <(-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8)>*Factor, <2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8), (-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8)>*Factor, <2*(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 0, 0>*Factor, <(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*Factor, <(-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*Factor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*Factor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*Factor};


#include "numbers_footer.inc"
