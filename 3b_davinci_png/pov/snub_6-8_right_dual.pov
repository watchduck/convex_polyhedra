#include "polyhedra_davinci.inc"



#declare EdgeOffset = .3;
#declare FaceOffset = EdgeOffset * 2/3;
#declare PrismThickness = FaceOffset*2 + .1;


#declare Factor = 3.15;
#declare Abs = array[5]{ (0)*Factor, (0.21879664300048043)*Factor, (0.7401837413698572)*Factor, (1.0236561781126903)*Factor, (1.3614101519264425)*Factor, }

#declare P = array[38]{ <Abs[0],Abs[0],-Abs[4]>, <Abs[0],Abs[0],Abs[4]>, <-Abs[4],Abs[0],Abs[0]>, <Abs[4],Abs[0],Abs[0]>, <Abs[0],-Abs[4],Abs[0]>, <Abs[0],Abs[4],Abs[0]>, <-Abs[2],Abs[1],-Abs[3]>, <-Abs[2],-Abs[1],Abs[3]>, <Abs[2],-Abs[1],-Abs[3]>, <Abs[2],Abs[1],Abs[3]>, <-Abs[3],Abs[2],-Abs[1]>, <-Abs[3],-Abs[2],Abs[1]>, <Abs[3],-Abs[2],-Abs[1]>, <Abs[3],Abs[2],Abs[1]>, <-Abs[1],Abs[3],-Abs[2]>, <-Abs[1],-Abs[3],Abs[2]>, <Abs[1],-Abs[3],-Abs[2]>, <Abs[1],Abs[3],Abs[2]>, <-Abs[1],-Abs[2],-Abs[3]>, <-Abs[1],Abs[2],Abs[3]>, <Abs[1],Abs[2],-Abs[3]>, <Abs[1],-Abs[2],Abs[3]>, <-Abs[3],-Abs[1],-Abs[2]>, <-Abs[3],Abs[1],Abs[2]>, <Abs[3],Abs[1],-Abs[2]>, <Abs[3],-Abs[1],Abs[2]>, <-Abs[2],-Abs[3],-Abs[1]>, <-Abs[2],Abs[3],Abs[1]>, <Abs[2],Abs[3],-Abs[1]>, <Abs[2],-Abs[3],Abs[1]>, <-Abs[2],-Abs[2],-Abs[2]>, <-Abs[2],-Abs[2],Abs[2]>, <-Abs[2],Abs[2],-Abs[2]>, <-Abs[2],Abs[2],Abs[2]>, <Abs[2],-Abs[2],-Abs[2]>, <Abs[2],-Abs[2],Abs[2]>, <Abs[2],Abs[2],-Abs[2]>, <Abs[2],Abs[2],Abs[2]>, }


#declare Edges = array[60]{array[2]{36, 24}, array[2]{33, 19}, array[2]{7, 1}, array[2]{15, 4}, array[2]{16, 34}, array[2]{0, 20}, array[2]{9, 37}, array[2]{11, 31}, array[2]{34, 12}, array[2]{15, 21}, array[2]{1, 9}, array[2]{26, 30}, array[2]{5, 28}, array[2]{10, 27}, array[2]{8, 24}, array[2]{30, 18}, array[2]{24, 3}, array[2]{18, 16}, array[2]{29, 35}, array[2]{0, 8}, array[2]{23, 7}, array[2]{2, 11}, array[2]{26, 4}, array[2]{6, 0}, array[2]{27, 5}, array[2]{21, 35}, array[2]{14, 5}, array[2]{5, 17}, array[2]{19, 17}, array[2]{19, 1}, array[2]{13, 3}, array[2]{22, 30}, array[2]{33, 27}, array[2]{25, 3}, array[2]{1, 21}, array[2]{31, 7}, array[2]{4, 29}, array[2]{23, 33}, array[2]{9, 25}, array[2]{36, 28}, array[2]{20, 36}, array[2]{2, 23}, array[2]{2, 22}, array[2]{22, 6}, array[2]{29, 12}, array[2]{37, 13}, array[2]{18, 0}, array[2]{12, 3}, array[2]{35, 25}, array[2]{32, 14}, array[2]{6, 32}, array[2]{17, 37}, array[2]{11, 26}, array[2]{4, 16}, array[2]{10, 32}, array[2]{28, 13}, array[2]{31, 15}, array[2]{34, 8}, array[2]{2, 10}, array[2]{14, 20}};


#declare Faces = array[24]{
    array[6]{P[0], P[18], P[30], P[22], P[6], P[0]},
    array[6]{P[0], P[8], P[34], P[16], P[18], P[0]},
    array[6]{P[0], P[20], P[36], P[24], P[8], P[0]},
    array[6]{P[0], P[6], P[32], P[14], P[20], P[0]},
    array[6]{P[1], P[19], P[33], P[23], P[7], P[1]},
    array[6]{P[1], P[9], P[37], P[17], P[19], P[1]},
    array[6]{P[1], P[21], P[35], P[25], P[9], P[1]},
    array[6]{P[1], P[7], P[31], P[15], P[21], P[1]},
    array[6]{P[2], P[23], P[33], P[27], P[10], P[2]},
    array[6]{P[2], P[11], P[31], P[7], P[23], P[2]},
    array[6]{P[2], P[22], P[30], P[26], P[11], P[2]},
    array[6]{P[2], P[10], P[32], P[6], P[22], P[2]},
    array[6]{P[3], P[25], P[35], P[29], P[12], P[3]},
    array[6]{P[3], P[13], P[37], P[9], P[25], P[3]},
    array[6]{P[3], P[24], P[36], P[28], P[13], P[3]},
    array[6]{P[3], P[12], P[34], P[8], P[24], P[3]},
    array[6]{P[4], P[29], P[35], P[21], P[15], P[4]},
    array[6]{P[4], P[16], P[34], P[12], P[29], P[4]},
    array[6]{P[4], P[26], P[30], P[18], P[16], P[4]},
    array[6]{P[4], P[15], P[31], P[11], P[26], P[4]},
    array[6]{P[5], P[28], P[36], P[20], P[14], P[5]},
    array[6]{P[5], P[17], P[37], P[13], P[28], P[5]},
    array[6]{P[5], P[27], P[33], P[19], P[17], P[5]},
    array[6]{P[5], P[14], P[32], P[10], P[27], P[5]}
}


#declare FaceNormalPoints = array[24]{ 
<-12155369055582249886041980670475224963598793/22711361941990599616790756553000000000000000, -6608740600737328291817109705457689315123097/22711361941990599616790756553000000000000000, -22357209308672504799193036767104719267898617/22711361941990599616790756553000000000000000>*Factor, <11178604654336240508308719238771443210182923496150121015935046624977831643/38415993552950978115292052403444661514608688564118607600267000000000000000, -20560659482496000278820182796853538162754735604842916421364048711430320283/38415993552950978115292052403444661514608688564118607600267000000000000000, -37816948664623323696459630142407894698976745600824716429149747798515748443/38415993552950978115292052403444661514608688564118607600267000000000000000>*Factor, <12155369055582249886041980670475224963598793/22711361941990599616790756553000000000000000, 6608740600737328291817109705457689315123097/22711361941990599616790756553000000000000000, -22357209308672504799193036767104719267898617/22711361941990599616790756553000000000000000>*Factor, <-28468605437302189829982510130896955634797839/97834192795849012158651825199000000000000000, 680705075963221190872665172602601429230889683/1271844506346037158062473727587000000000000000, -1252011830426200782838815896298657357075237523/1271844506346037158062473727587000000000000000>*Factor, <-20560659482496000278820182796853538162754735604842916421364048711430320283/38415993552950978115292052403444661514608688564118607600267000000000000000, 11178604654336240508308719238771443210182923496150121015935046624977831643/38415993552950978115292052403444661514608688564118607600267000000000000000, 37816948664623323696459630142407894698976745600824716429149747798515748443/38415993552950978115292052403444661514608688564118607600267000000000000000>*Factor, <28468605437302189829982510130896955634797839/97834192795849012158651825199000000000000000, 680705075963221190872665172602601429230889683/1271844506346037158062473727587000000000000000, 1252011830426200782838815896298657357075237523/1271844506346037158062473727587000000000000000>*Factor, <12155369055582249886041980670475224963598793/22711361941990599616790756553000000000000000, -6608740600737328291817109705457689315123097/22711361941990599616790756553000000000000000, 22357209308672504799193036767104719267898617/22711361941990599616790756553000000000000000>*Factor, <-11178604654336240508308719238771443210182923496150121015935046624977831643/38415993552950978115292052403444661514608688564118607600267000000000000000, -20560659482496000278820182796853538162754735604842916421364048711430320283/38415993552950978115292052403444661514608688564118607600267000000000000000, 37816948664623323696459630142407894698976745600824716429149747798515748443/38415993552950978115292052403444661514608688564118607600267000000000000000>*Factor, <-1252011830426200782838815896298657357075237523/1271844506346037158062473727587000000000000000, 680705075963221190872665172602601429230889683/1271844506346037158062473727587000000000000000, 28468605437302189829982510130896955634797839/97834192795849012158651825199000000000000000>*Factor, <-198010705702041091441988438569615913820168392741471407096638973958841/201147323151981606526801638242987330933398660291366130974961914062500, -9365042816116591173941542954889586718243384421474041185308114505204081/32183571704317057044288262118877972949343785646618580955993906250000000, 107656245085603517306634020904179489376512099660941906563457227647799/201147323151981606526801638242987330933398660291366130974961914062500>*Factor, <-22357209308672504799193036767104719267898617/22711361941990599616790756553000000000000000, -12155369055582249886041980670475224963598793/22711361941990599616790756553000000000000000, -6608740600737328291817109705457689315123097/22711361941990599616790756553000000000000000>*Factor, <-37816948664623373642190468173620578758150871523184392983989037509131707147/38415993552951019997339699448750744743751725130254738653547000000000000000, 11178604654336246844862653889404340299496306082272307664787264355378248123/38415993552951019997339699448750744743751725130254738653547000000000000000, -20560659482496011933559908499928799778508860438022057386082538165118647163/38415993552951019997339699448750744743751725130254738653547000000000000000>*Factor, <563230451774697321799180969198433556142003130841977220076128692698492809/572152385854528007672673087757850127990375110289269514894950000000000000, -306222208243497230807742755390353615306517876029143651403145721425596761/572152385854528007672673087757850127990375110289269514894950000000000000, 16648965006429293020295681402032151926318044150436915737807433867204071/57215238585452800767267308775785012799037511028926951489495000000000000>*Factor, <17148554730906115534252608993529119584161920619554580030601567474951247441/17420198912060412789694147968105136006474051811932219752118550000000000000, 5069074065972268867436227867458596256539162935232233104647184018040278369/17420198912060412789694147968105136006474051811932219752118550000000000000, 932348079074232772695317559820554140461878434229323595241781210563187391/1742019891206041278969414796810513600647405181193221975211855000000000000>*Factor, <6351316567002274585924368196666593441362663047993507512334100274500107/6451925522985348743925298076758345870396685974675530060135750000000000, 34531410336082847485149273717290362459451631788675054402231285698706569/64519255229853487439252980767583458703966859746755300601357500000000000, -938717419624487531692202280632345578664361333783581518654030584217217/3225962761492674371962649038379172935198342987337765030067875000000000>*Factor, <198010705702041091441988438569615913820168392741471407096638973958841/201147323151981606526801638242987330933398660291366130974961914062500, -9365042816116591173941542954889586718243384421474041185308114505204081/32183571704317057044288262118877972949343785646618580955993906250000000, -107656245085603517306634020904179489376512099660941906563457227647799/201147323151981606526801638242987330933398660291366130974961914062500>*Factor, <28468605437302189829982510130896955634797839/97834192795849012158651825199000000000000000, -1252011830426200782838815896298657357075237523/1271844506346037158062473727587000000000000000, 680705075963221190872665172602601429230889683/1271844506346037158062473727587000000000000000>*Factor, <678399969031742545009510599438539851239/1267537593277719218682348547460000000000, -1559715097222237001927469910028656577836053/1584421991597149023352935684325000000000000, -368838609373203692878911842142311374119/1267537593277719218682348547460000000000>*Factor, <-11178604654336246844862653889404340299496306082272307664787264355378248123/38415993552951019997339699448750744743751725130254738653547000000000000000, -37816948664623373642190468173620578758150871523184392983989037509131707147/38415993552951019997339699448750744743751725130254738653547000000000000000, -20560659482496011933559908499928799778508860438022057386082538165118647163/38415993552951019997339699448750744743751725130254738653547000000000000000>*Factor, <-20560659482496000278820182796853538162754735604842916421364048711430320283/38415993552950978115292052403444661514608688564118607600267000000000000000, -37816948664623323696459630142407894698976745600824716429149747798515748443/38415993552950978115292052403444661514608688564118607600267000000000000000, 11178604654336240508308719238771443210182923496150121015935046624977831643/38415993552950978115292052403444661514608688564118607600267000000000000000>*Factor, <938717419624487531692202280632345578664361333783581518654030584217217/3225962761492674371962649038379172935198342987337765030067875000000000, 6351316567002274585924368196666593441362663047993507512334100274500107/6451925522985348743925298076758345870396685974675530060135750000000000, -34531410336082847485149273717290362459451631788675054402231285698706569/64519255229853487439252980767583458703966859746755300601357500000000000>*Factor, <306222208243497230807742755390353615306517876029143651403145721425596761/572152385854528007672673087757850127990375110289269514894950000000000000, 563230451774697321799180969198433556142003130841977220076128692698492809/572152385854528007672673087757850127990375110289269514894950000000000000, 16648965006429293020295681402032151926318044150436915737807433867204071/57215238585452800767267308775785012799037511028926951489495000000000000>*Factor, <-5069074065972268867436227867458596256539162935232233104647184018040278369/17420198912060412789694147968105136006474051811932219752118550000000000000, 17148554730906115534252608993529119584161920619554580030601567474951247441/17420198912060412789694147968105136006474051811932219752118550000000000000, 932348079074232772695317559820554140461878434229323595241781210563187391/1742019891206041278969414796810513600647405181193221975211855000000000000>*Factor, <-2516276213237893853889855140616011673653933191273713642250437720720327/4701466451865788615823134023321293044275796581369721553955000000000000, 13421645183259861540449654354092878273082108233307984587665260903218561/13634252710410786985887088667631749828399810085972192506469500000000000, -39674080171040135441698002470155091582851421733346527472858156448026107/136342527104107869858870886676317498283998100859721925064695000000000000>*Factor
}



#declare OuterSolid = SolidFromFaceNormalPoints(FaceNormalPoints, 0)
#declare InnerSolid = SolidFromFaceNormalPoints(FaceNormalPoints, FaceOffset)
#declare Hollow = difference{ object{OuterSolid} object{InnerSolid} }

#declare PrismUnion = union{
    #for(Index, 0, dimension_size(Faces, 1)-1)
        SolidPrismFromVerticesOfPolygon(Faces[Index], EdgeOffset, PrismThickness)
    #end
}


union{

    difference{ 
        object{Hollow} 
        object{PrismUnion}  
        texture {Wood14_with_turbulence} 
    }


    /////////////////////////////////// translucent polyhedron

    object{
        SolidFromFaceNormalPoints(FaceNormalPoints, RadFrame)
        pigment{ color TranslucentColor }
    }


    /////////////////////////////////// vertices and edges


    union{
        #for(Index, 0, 37)
            sphere{ P[Index], RadEdge }
        #end

        #for( Index, 0, dimension_size(Edges, 1) - 1 )
            #local EdgeArray = Edges[Index];
            cylinder{ P[EdgeArray[0]], P[EdgeArray[1]], RadEdge }
        #end

        pigment{color EdgeColor}
    }


    /////////////////////////////////// face frames

    union{
        #for(FaceIndex, 0, dimension_size(Faces, 1)-1)
            #declare FacePoints = Faces[FaceIndex];  // closed (last point is the first repeated)
            #declare NumberOfFacePoints = dimension_size(FacePoints, 1);  // actually one more
            #declare FacePointsUnclosed = array[NumberOfFacePoints-1];
            #for(PointIndex, 0, NumberOfFacePoints-2)
                #declare FacePointsUnclosed[PointIndex] = FacePoints[PointIndex];
            #end
            #declare FramePoints = MovePolygonEdges(FacePointsUnclosed, EdgeOffset);
            union{
                #for(PointIndex, 0, NumberOfFacePoints-3)
                    cylinder{FramePoints[PointIndex], FramePoints[PointIndex+1], RadFrame }
                #end
                cylinder{FramePoints[NumberOfFacePoints-2], FramePoints[0], RadFrame }
                translate -vnormalize(FaceNormalPoints[FaceIndex]) * (RadFrame + .001)

            }
        #end
        pigment{ color EdgeColor }
    }

    scale -x
}

