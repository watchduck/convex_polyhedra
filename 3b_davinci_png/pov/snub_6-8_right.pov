#include "polyhedra_davinci.inc"


/////////////////////////////////// variables

#declare EdgeOffset = .3;
#declare FaceOffset = EdgeOffset * 2/3;
#declare PrismThickness = FaceOffset*2 + .1;

#declare Factor = 3.3;
#declare Abs = array[3]{ (0.33775397381375233)*Factor, (0.6212264105565853)*Factor, (1.1426135089259621)*Factor, }

#declare P = array[24]{ <-Abs[2],-Abs[1],-Abs[0]>, <-Abs[2],-Abs[0],Abs[1]>, <-Abs[2],Abs[0],-Abs[1]>, <-Abs[2],Abs[1],Abs[0]>, <-Abs[1],-Abs[2],Abs[0]>, <-Abs[1],-Abs[0],-Abs[2]>, <-Abs[1],Abs[0],Abs[2]>, <-Abs[1],Abs[2],-Abs[0]>, <-Abs[0],-Abs[2],-Abs[1]>, <-Abs[0],-Abs[1],Abs[2]>, <-Abs[0],Abs[1],-Abs[2]>, <-Abs[0],Abs[2],Abs[1]>, <Abs[0],-Abs[2],Abs[1]>, <Abs[0],-Abs[1],-Abs[2]>, <Abs[0],Abs[1],Abs[2]>, <Abs[0],Abs[2],-Abs[1]>, <Abs[1],-Abs[2],-Abs[0]>, <Abs[1],-Abs[0],Abs[2]>, <Abs[1],Abs[0],-Abs[2]>, <Abs[1],Abs[2],Abs[0]>, <Abs[2],-Abs[1],Abs[0]>, <Abs[2],-Abs[0],-Abs[1]>, <Abs[2],Abs[0],Abs[1]>, <Abs[2],Abs[1],-Abs[0]>, }


#declare Edges = array[60]{array[2]{1, 6}, array[2]{19, 22}, array[2]{14, 17}, array[2]{6, 9}, array[2]{9, 12}, array[2]{12, 17}, array[2]{13, 16}, array[2]{15, 19}, array[2]{3, 11}, array[2]{10, 15}, array[2]{21, 23}, array[2]{0, 1}, array[2]{8, 16}, array[2]{14, 22}, array[2]{19, 23}, array[2]{22, 23}, array[2]{11, 14}, array[2]{14, 19}, array[2]{4, 9}, array[2]{13, 18}, array[2]{9, 17}, array[2]{0, 5}, array[2]{3, 7}, array[2]{7, 15}, array[2]{0, 2}, array[2]{4, 12}, array[2]{20, 21}, array[2]{8, 13}, array[2]{7, 10}, array[2]{0, 4}, array[2]{2, 5}, array[2]{16, 20}, array[2]{12, 20}, array[2]{5, 8}, array[2]{12, 16}, array[2]{2, 10}, array[2]{6, 14}, array[2]{15, 18}, array[2]{2, 7}, array[2]{18, 23}, array[2]{3, 6}, array[2]{10, 18}, array[2]{16, 21}, array[2]{1, 3}, array[2]{5, 10}, array[2]{13, 21}, array[2]{7, 11}, array[2]{4, 8}, array[2]{2, 3}, array[2]{5, 13}, array[2]{0, 8}, array[2]{17, 20}, array[2]{17, 22}, array[2]{18, 21}, array[2]{6, 11}, array[2]{15, 23}, array[2]{1, 4}, array[2]{11, 19}, array[2]{1, 9}, array[2]{20, 22}};


#declare Faces = array[38]{array[4]{P[1], P[9], P[6], P[1]}, array[4]{P[1], P[3], P[6], P[1]}, array[4]{P[11], P[3], P[6], P[11]}, array[4]{P[11], P[3], P[7], P[11]}, array[4]{P[5], P[8], P[0], P[5]}, array[4]{P[15], P[10], P[7], P[15]}, array[4]{P[15], P[10], P[18], P[15]}, array[4]{P[15], P[23], P[18], P[15]}, array[4]{P[15], P[23], P[19], P[15]}, array[4]{P[22], P[23], P[19], P[22]}, array[4]{P[22], P[17], P[20], P[22]}, array[4]{P[4], P[8], P[0], P[4]}, array[4]{P[4], P[1], P[0], P[4]}, array[4]{P[4], P[1], P[9], P[4]}, array[4]{P[21], P[23], P[18], P[21]}, array[4]{P[21], P[16], P[20], P[21]}, array[4]{P[2], P[3], P[7], P[2]}, array[4]{P[2], P[10], P[7], P[2]}, array[4]{P[2], P[5], P[0], P[2]}, array[4]{P[2], P[5], P[10], P[2]}, array[4]{P[14], P[11], P[19], P[14]}, array[4]{P[14], P[11], P[6], P[14]}, array[4]{P[14], P[22], P[19], P[14]}, array[4]{P[14], P[22], P[17], P[14]}, array[4]{P[12], P[17], P[20], P[12]}, array[4]{P[12], P[16], P[20], P[12]}, array[4]{P[12], P[17], P[9], P[12]}, array[4]{P[12], P[4], P[9], P[12]}, array[4]{P[13], P[5], P[8], P[13]}, array[4]{P[13], P[16], P[8], P[13]}, array[4]{P[13], P[21], P[18], P[13]}, array[4]{P[13], P[21], P[16], P[13]}, array[5]{P[0], P[1], P[3], P[2], P[0]}, array[5]{P[19], P[11], P[7], P[15], P[19]}, array[5]{P[23], P[22], P[20], P[21], P[23]}, array[5]{P[5], P[13], P[18], P[10], P[5]}, array[5]{P[12], P[4], P[8], P[16], P[12]}, array[5]{P[14], P[6], P[9], P[17], P[14]}};


#declare FaceNormalPoints = array[38]{<-168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <-145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-2101593893296297/3000000000000000, 2101593893296297/3000000000000000, 2101593893296297/3000000000000000>*Factor, <-168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-2101593893296297/3000000000000000, -2101593893296297/3000000000000000, -2101593893296297/3000000000000000>*Factor, <-49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <2101593893296297/3000000000000000, 2101593893296297/3000000000000000, -2101593893296297/3000000000000000>*Factor, <168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-2101593893296297/3000000000000000, -2101593893296297/3000000000000000, 2101593893296297/3000000000000000>*Factor, <145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-2101593893296297/3000000000000000, 2101593893296297/3000000000000000, -2101593893296297/3000000000000000>*Factor, <-145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <2101593893296297/3000000000000000, 2101593893296297/3000000000000000, 2101593893296297/3000000000000000>*Factor, <168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <2101593893296297/3000000000000000, -2101593893296297/3000000000000000, 2101593893296297/3000000000000000>*Factor, <168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, 145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <-49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, 168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <-49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000, -168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000>*Factor, <168127511463702456172418938922387035704955984354978275066268302735814773/239999999999998311055619328402056405418364707889155550155551680000000000, -49698112844526415815604357555750874085149449308893431419518011222217157/239999999999998311055619328402056405418364707889155550155551680000000000, -145322671420424286460171207840286466594556366735543026672398272168387430133/149999999999998944409762080251285253386477942430722218847219800000000000000>*Factor, <2101593893296297/3000000000000000, -2101593893296297/3000000000000000, -2101593893296297/3000000000000000>*Factor, <-28565337723149/25000000000000, 0, 0>*Factor, <0, 28565337723149/25000000000000, 0>*Factor, <28565337723149/25000000000000, 0, 0>*Factor, <0, 0, -28565337723149/25000000000000>*Factor, <0, -28565337723149/25000000000000, 0>*Factor, <0, 0, 28565337723149/25000000000000>*Factor};


/////////////////////////////////// CSG polyhedron



#declare OuterSolid = SolidFromFaceNormalPoints(FaceNormalPoints, 0)
#declare InnerSolid = SolidFromFaceNormalPoints(FaceNormalPoints, FaceOffset)
#declare Hollow = difference{ object{OuterSolid} object{InnerSolid} }

#declare PrismUnion = union{
    #for(Index, 0, dimension_size(Faces, 1)-1)
        SolidPrismFromVerticesOfPolygon(Faces[Index], EdgeOffset, PrismThickness)
    #end
}
#declare Davinci = difference{ object{Hollow} object{PrismUnion} }


union{

    object{
        Davinci
        texture{ Wood14_with_turbulence }
    }


    /////////////////////////////////// translucent polyhedron

    object{
        SolidFromFaceNormalPoints(FaceNormalPoints, RadFrame)
        pigment{ color TranslucentColor }
    }


    /////////////////////////////////// polyhedron edges

    union{
        #for( Index, 0, dimension_size(P, 1) - 1 )
            sphere{ P[Index], RadEdge }
        #end

        #for( Index, 0, dimension_size(Edges, 1) - 1 )
            #local EdgeArray = Edges[Index];
            cylinder{ P[EdgeArray[0]], P[EdgeArray[1]], RadEdge }
        #end

        pigment{ color EdgeColor }
    }


    /////////////////////////////////// face frames

    union{
        #for(FaceIndex, 0, dimension_size(Faces, 1)-1)
            #declare FacePoints = Faces[FaceIndex];  // closed (last point is the first repeated)
            #declare NumberOfFacePoints = dimension_size(FacePoints, 1);  // actually one more
            #declare FacePointsUnclosed = array[NumberOfFacePoints-1];
            #for(PointIndex, 0, NumberOfFacePoints-2)
                #declare FacePointsUnclosed[PointIndex] = FacePoints[PointIndex];
            #end
            #declare FramePoints = MovePolygonEdges(FacePointsUnclosed, EdgeOffset);
            union{
                #for(PointIndex, 0, NumberOfFacePoints-3)
                    cylinder{FramePoints[PointIndex], FramePoints[PointIndex+1], RadFrame }
                #end
                cylinder{FramePoints[NumberOfFacePoints-2], FramePoints[0], RadFrame }
                translate -vnormalize(FaceNormalPoints[FaceIndex]) * (RadFrame + .001)
            }
        #end
        pigment{ color EdgeColor }
    }

    scale -x
}



