#include "small_in_great_rhombi.inc"
#include "RotMatFromVectorAndAngle.inc"


#declare Factor = 1;

#declare EdgeOffset = 0.23;
#declare FaceOffset = EdgeOffset;
#declare PrismThickness = FaceOffset*2 + .1;


union{



//////////////////////////////////////////////////////////////////// small

#declare Abs = array[7]{ (0)*Factor, (1)*Factor, (1/2 + sqrt(5)/2)*Factor, pow(1/2 + sqrt(5)/2, 2)*Factor, (1 + sqrt(5))*Factor, (sqrt(5)/2 + 5/2)*Factor, pow(1/2 + sqrt(5)/2, 3)*Factor, }

#declare P = array[60]{ <-Abs[6],-Abs[1],-Abs[1]>, <-Abs[6],-Abs[1],Abs[1]>, <-Abs[6],Abs[1],-Abs[1]>, <-Abs[6],Abs[1],Abs[1]>, <-Abs[5],-Abs[3],Abs[0]>, <-Abs[5],Abs[3],Abs[0]>, <-Abs[4],-Abs[2],-Abs[3]>, <-Abs[4],-Abs[2],Abs[3]>, <-Abs[4],Abs[2],-Abs[3]>, <-Abs[4],Abs[2],Abs[3]>, <-Abs[3],-Abs[4],-Abs[2]>, <-Abs[3],-Abs[4],Abs[2]>, <-Abs[3],Abs[0],-Abs[5]>, <-Abs[3],Abs[0],Abs[5]>, <-Abs[3],Abs[4],-Abs[2]>, <-Abs[3],Abs[4],Abs[2]>, <-Abs[2],-Abs[3],-Abs[4]>, <-Abs[2],-Abs[3],Abs[4]>, <-Abs[2],Abs[3],-Abs[4]>, <-Abs[2],Abs[3],Abs[4]>, <-Abs[1],-Abs[6],-Abs[1]>, <-Abs[1],-Abs[6],Abs[1]>, <-Abs[1],-Abs[1],-Abs[6]>, <-Abs[1],-Abs[1],Abs[6]>, <-Abs[1],Abs[1],-Abs[6]>, <-Abs[1],Abs[1],Abs[6]>, <-Abs[1],Abs[6],-Abs[1]>, <-Abs[1],Abs[6],Abs[1]>, <Abs[0],-Abs[5],-Abs[3]>, <Abs[0],-Abs[5],Abs[3]>, <Abs[0],Abs[5],-Abs[3]>, <Abs[0],Abs[5],Abs[3]>, <Abs[1],-Abs[6],-Abs[1]>, <Abs[1],-Abs[6],Abs[1]>, <Abs[1],-Abs[1],-Abs[6]>, <Abs[1],-Abs[1],Abs[6]>, <Abs[1],Abs[1],-Abs[6]>, <Abs[1],Abs[1],Abs[6]>, <Abs[1],Abs[6],-Abs[1]>, <Abs[1],Abs[6],Abs[1]>, <Abs[2],-Abs[3],-Abs[4]>, <Abs[2],-Abs[3],Abs[4]>, <Abs[2],Abs[3],-Abs[4]>, <Abs[2],Abs[3],Abs[4]>, <Abs[3],-Abs[4],-Abs[2]>, <Abs[3],-Abs[4],Abs[2]>, <Abs[3],Abs[0],-Abs[5]>, <Abs[3],Abs[0],Abs[5]>, <Abs[3],Abs[4],-Abs[2]>, <Abs[3],Abs[4],Abs[2]>, <Abs[4],-Abs[2],-Abs[3]>, <Abs[4],-Abs[2],Abs[3]>, <Abs[4],Abs[2],-Abs[3]>, <Abs[4],Abs[2],Abs[3]>, <Abs[5],-Abs[3],Abs[0]>, <Abs[5],Abs[3],Abs[0]>, <Abs[6],-Abs[1],-Abs[1]>, <Abs[6],-Abs[1],Abs[1]>, <Abs[6],Abs[1],-Abs[1]>, <Abs[6],Abs[1],Abs[1]>, }

#declare FaceNormalPoints = array[62]{<(-1 + sqrt(5))*(-sqrt(5)/3 - 1/2), 0, -(1 + sqrt(5))*(-sqrt(5)/3 - 1/2)>*Factor, <-(1/2 + sqrt(5)/3)*(1 + sqrt(5)), (-1 + sqrt(5))*(1/2 + sqrt(5)/3), 0>*Factor, <(-1 + sqrt(5))*(1/2 + sqrt(5)/3), 0, (1/2 + sqrt(5)/3)*(1 + sqrt(5))>*Factor, <(1 + sqrt(5))*(-sqrt(5)/3 - 1/2), (-1 + sqrt(5))*(-sqrt(5)/3 - 1/2), 0>*Factor, <-2*sqrt(5)/3 - 1, -2*sqrt(5)/3 - 1, -2*sqrt(5)/3 - 1>*Factor, <(-1 + sqrt(5))*(1/2 + sqrt(5)/3), 0, -(1/2 + sqrt(5)/3)*(1 + sqrt(5))>*Factor, <1 + 2*sqrt(5)/3, 1 + 2*sqrt(5)/3, -2*sqrt(5)/3 - 1>*Factor, <0, -(1 + sqrt(5))*(-sqrt(5)/3 - 1/2), (-sqrt(5) + 1)*(-sqrt(5)/3 - 1/2)>*Factor, <1 + 2*sqrt(5)/3, 1 + 2*sqrt(5)/3, 1 + 2*sqrt(5)/3>*Factor, <-2*sqrt(5)/3 - 1, 1 + 2*sqrt(5)/3, 1 + 2*sqrt(5)/3>*Factor, <(1/2 + sqrt(5)/3)*(1 + sqrt(5)), (-1 + sqrt(5))*(1/2 + sqrt(5)/3), 0>*Factor, <(-1 + sqrt(5))*(-sqrt(5)/3 - 1/2), 0, (1 + sqrt(5))*(-sqrt(5)/3 - 1/2)>*Factor, <-2*sqrt(5)/3 - 1, 1 + 2*sqrt(5)/3, -2*sqrt(5)/3 - 1>*Factor, <-(1 + sqrt(5))*(-sqrt(5)/3 - 1/2), (-1 + sqrt(5))*(-sqrt(5)/3 - 1/2), 0>*Factor, <0, (1/2 + sqrt(5)/3)*(1 + sqrt(5)), (1/2 + sqrt(5)/3)*(-sqrt(5) + 1)>*Factor, <0, -(1/2 + sqrt(5)/3)*(1 + sqrt(5)), (-1 + sqrt(5))*(1/2 + sqrt(5)/3)>*Factor, <1 + 2*sqrt(5)/3, -2*sqrt(5)/3 - 1, -2*sqrt(5)/3 - 1>*Factor, <-2*sqrt(5)/3 - 1, -2*sqrt(5)/3 - 1, 1 + 2*sqrt(5)/3>*Factor, <0, (1 + sqrt(5))*(-sqrt(5)/3 - 1/2), (-1 + sqrt(5))*(-sqrt(5)/3 - 1/2)>*Factor, <1 + 2*sqrt(5)/3, -2*sqrt(5)/3 - 1, 1 + 2*sqrt(5)/3>*Factor, <(-1 + sqrt(5))*(1/2 + sqrt(5)/4), (1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2>*Factor, <(-1 + sqrt(5))*(1/2 + sqrt(5)/4), -(1/2 + sqrt(5)/4)*(1 + sqrt(5)), -sqrt(5)/2 - 1>*Factor, <-sqrt(5)/2 - 1, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1), (1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <0, 2 + sqrt(5), 0>*Factor, <0, -3/2 - 3*sqrt(5)/10, -(1 + sqrt(5))*(3*sqrt(5)/20 + 3/4)>*Factor, <(1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2, (-1 + sqrt(5))*(1/2 + sqrt(5)/4)>*Factor, <2 + sqrt(5), 0, 0>*Factor, <-sqrt(5)/2 - 1, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1), -(1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <-3*sqrt(5)*(sqrt(5) + 3)/10, 0, 3*sqrt(5)*(1 + sqrt(5))/10>*Factor, <(1 + sqrt(5))*(-sqrt(5)/4 - 1/2), 1 + sqrt(5)/2, (-sqrt(5) + 1)*(-sqrt(5)/4 - 1/2)>*Factor, <(1/2 + sqrt(5)/4)*(1 + sqrt(5)), -sqrt(5)/2 - 1, (-1 + sqrt(5))*(1/2 + sqrt(5)/4)>*Factor, <(-1 + sqrt(5))*(-sqrt(5)/4 - 1/2), (1 + sqrt(5))*(-sqrt(5)/4 - 1/2), -sqrt(5)/2 - 1>*Factor, <0, 3*sqrt(5)/10 + 3/2, (1 + sqrt(5))*(3*sqrt(5)/20 + 3/4)>*Factor, <3*sqrt(5)*(1 + sqrt(5))/10, -3*sqrt(5)*(sqrt(5) + 3)/10, 0>*Factor, <-(1 + sqrt(5))*(-sqrt(5)/4 - 1/2), -sqrt(5)/2 - 1, (-1 + sqrt(5))*(-sqrt(5)/4 - 1/2)>*Factor, <3*sqrt(5)/10 + 3/2, -(-3/4 - 3*sqrt(5)/20)*(1 + sqrt(5)), 0>*Factor, <(-sqrt(5) + 1)*(-sqrt(5)/4 - 1/2), -(1 + sqrt(5))*(-sqrt(5)/4 - 1/2), -sqrt(5)/2 - 1>*Factor, <-3/2 - 3*sqrt(5)/10, (1 + sqrt(5))*(3*sqrt(5)/20 + 3/4), 0>*Factor, <-(-3/4 - 3*sqrt(5)/20)*(1 + sqrt(5)), 0, 3*sqrt(5)/10 + 3/2>*Factor, <(1 + sqrt(5))*(3*sqrt(5)/20 + 3/4), 0, -3/2 - 3*sqrt(5)/10>*Factor, <0, 0, -sqrt(5) - 2>*Factor, <0, 3*sqrt(5)/10 + 3/2, (-3/4 - 3*sqrt(5)/20)*(1 + sqrt(5))>*Factor, <(-sqrt(5) + 1)*(-sqrt(5)/4 - 1/2), (1 + sqrt(5))*(-sqrt(5)/4 - 1/2), 1 + sqrt(5)/2>*Factor, <0, -sqrt(5) - 2, 0>*Factor, <(1/2 + sqrt(5)/4)*(-sqrt(5) + 1), (1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2>*Factor, <-(1/2 + sqrt(5)/4)*(1 + sqrt(5)), -sqrt(5)/2 - 1, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1)>*Factor, <1 + sqrt(5)/2, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1), (1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <0, -3/2 - 3*sqrt(5)/10, (1 + sqrt(5))*(3*sqrt(5)/20 + 3/4)>*Factor, <(1/2 + sqrt(5)/4)*(-sqrt(5) + 1), -(1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2>*Factor, <-sqrt(5)/2 - 1, (-1 + sqrt(5))*(1/2 + sqrt(5)/4), (1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <-(1/2 + sqrt(5)/4)*(1 + sqrt(5)), -sqrt(5)/2 - 1, (-1 + sqrt(5))*(1/2 + sqrt(5)/4)>*Factor, <(-1 + sqrt(5))*(-sqrt(5)/4 - 1/2), -(1 + sqrt(5))*(-sqrt(5)/4 - 1/2), -sqrt(5)/2 - 1>*Factor, <-(1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1)>*Factor, <-sqrt(5) - 2, 0, 0>*Factor, <-3/2 - 3*sqrt(5)/10, (-3/4 - 3*sqrt(5)/20)*(1 + sqrt(5)), 0>*Factor, <1 + sqrt(5)/2, (-1 + sqrt(5))*(1/2 + sqrt(5)/4), (1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <1 + sqrt(5)/2, (-1 + sqrt(5))*(-sqrt(5)/4 - 1/2), (1 + sqrt(5))*(-sqrt(5)/4 - 1/2)>*Factor, <-3*sqrt(5)*(sqrt(5) + 3)/10, 0, -3*sqrt(5)*(1 + sqrt(5))/10>*Factor, <(1/2 + sqrt(5)/4)*(1 + sqrt(5)), 1 + sqrt(5)/2, (1/2 + sqrt(5)/4)*(-sqrt(5) + 1)>*Factor, <0, 0, 2 + sqrt(5)>*Factor, <-sqrt(5)/2 - 1, (-1 + sqrt(5))*(1/2 + sqrt(5)/4), -(1/2 + sqrt(5)/4)*(1 + sqrt(5))>*Factor, <1 + sqrt(5)/2, (-sqrt(5) + 1)*(-sqrt(5)/4 - 1/2), (1 + sqrt(5))*(-sqrt(5)/4 - 1/2)>*Factor};

#declare Faces = array[62]{array[4]{P[13], P[25], P[23], P[13]}, array[4]{P[5], P[3], P[2], P[5]}, array[4]{P[37], P[35], P[47], P[37]}, array[4]{P[4], P[1], P[0], P[4]}, array[4]{P[16], P[6], P[10], P[16]}, array[4]{P[34], P[36], P[46], P[34]}, array[4]{P[48], P[52], P[42], P[48]}, array[4]{P[31], P[39], P[27], P[31]}, array[4]{P[49], P[53], P[43], P[49]}, array[4]{P[15], P[19], P[9], P[15]}, array[4]{P[59], P[58], P[55], P[59]}, array[4]{P[24], P[12], P[22], P[24]}, array[4]{P[14], P[18], P[8], P[14]}, array[4]{P[54], P[57], P[56], P[54]}, array[4]{P[38], P[30], P[26], P[38]}, array[4]{P[29], P[21], P[33], P[29]}, array[4]{P[44], P[50], P[40], P[44]}, array[4]{P[17], P[7], P[11], P[17]}, array[4]{P[32], P[28], P[20], P[32]}, array[4]{P[41], P[45], P[51], P[41]}, array[5]{P[31], P[43], P[49], P[39], P[31]}, array[5]{P[32], P[28], P[40], P[44], P[32]}, array[5]{P[13], P[23], P[17], P[7], P[13]}, array[5]{P[26], P[38], P[39], P[27], P[26]}, array[6]{P[34], P[22], P[16], P[28], P[40], P[34]}, array[5]{P[53], P[49], P[55], P[59], P[53]}, array[5]{P[57], P[56], P[58], P[59], P[57]}, array[5]{P[16], P[6], P[12], P[22], P[16]}, array[6]{P[9], P[3], P[1], P[7], P[13], P[9]}, array[5]{P[5], P[15], P[9], P[3], P[5]}, array[5]{P[45], P[54], P[57], P[51], P[45]}, array[5]{P[20], P[10], P[16], P[28], P[20]}, array[6]{P[37], P[25], P[19], P[31], P[43], P[37]}, array[6]{P[32], P[33], P[45], P[54], P[44], P[32]}, array[5]{P[54], P[44], P[50], P[56], P[54]}, array[6]{P[38], P[48], P[55], P[49], P[39], P[38]}, array[5]{P[30], P[38], P[48], P[42], P[30]}, array[6]{P[27], P[15], P[5], P[14], P[26], P[27]}, array[6]{P[47], P[51], P[57], P[59], P[53], P[47]}, array[6]{P[50], P[46], P[52], P[58], P[56], P[50]}, array[5]{P[22], P[34], P[36], P[24], P[22]}, array[6]{P[30], P[18], P[24], P[36], P[42], P[30]}, array[5]{P[33], P[29], P[41], P[45], P[33]}, array[5]{P[20], P[32], P[33], P[21], P[20]}, array[5]{P[27], P[15], P[19], P[31], P[27]}, array[5]{P[4], P[10], P[6], P[0], P[4]}, array[5]{P[35], P[47], P[51], P[41], P[35]}, array[6]{P[35], P[23], P[17], P[29], P[41], P[35]}, array[5]{P[21], P[11], P[17], P[29], P[21]}, array[5]{P[9], P[19], P[25], P[13], P[9]}, array[5]{P[4], P[1], P[7], P[11], P[4]}, array[5]{P[14], P[26], P[30], P[18], P[14]}, array[5]{P[8], P[14], P[5], P[2], P[8]}, array[5]{P[0], P[2], P[3], P[1], P[0]}, array[6]{P[10], P[20], P[21], P[11], P[4], P[10]}, array[5]{P[43], P[53], P[47], P[37], P[43]}, array[5]{P[34], P[40], P[50], P[46], P[34]}, array[6]{P[2], P[0], P[6], P[12], P[8], P[2]}, array[5]{P[48], P[55], P[58], P[52], P[48]}, array[5]{P[35], P[23], P[25], P[37], P[35]}, array[5]{P[18], P[8], P[12], P[24], P[18]}, array[5]{P[42], P[36], P[46], P[52], P[42]}};

#declare OuterSolid = object{
    SolidFromFaceNormalPoints(FaceNormalPoints, 0)
    pigment{ color SmallDark }
}

#declare InnerSolid = object{
    SolidFromFaceNormalPoints(FaceNormalPoints, FaceOffset)
    pigment{ color SmallLight }
}

#declare Hollow = difference{ object{OuterSolid} object{InnerSolid} }

#declare PrismUnion = union{
    #for(Index, 0, dimension_size(Faces, 1)-1)
        SolidPrismFromVerticesOfPolygon(Faces[Index], EdgeOffset, PrismThickness)
    #end
    pigment{ color SmallLight }
}

#declare Davinci = difference{ object{Hollow} object{PrismUnion} }
object{ Davinci }


//////////////////////////////////////////////////////////////////// great

#declare GreatFactor = (1/2 + sqrt(5)/2) * Factor;

#declare Abs = array[12]{ (1/(1/2 + sqrt(5)/2))*GreatFactor, (2/(1/2 + sqrt(5)/2))*GreatFactor, (1/2 + sqrt(5)/2)*GreatFactor, (2)*GreatFactor, (sqrt(5))*GreatFactor, pow(1/2 + sqrt(5)/2, 2)*GreatFactor, (3)*GreatFactor, (1 + sqrt(5))*GreatFactor, (sqrt(5)/2 + 5/2)*GreatFactor, (1/2 + 3*sqrt(5)/2)*GreatFactor, (2 + sqrt(5))*GreatFactor, (sqrt(5)/2 + 7/2)*GreatFactor, }

#declare P = array[120]{ <-Abs[11],-Abs[0],-Abs[0]>, <-Abs[11],-Abs[0],Abs[0]>, <-Abs[11],Abs[0],-Abs[0]>, <-Abs[11],Abs[0],Abs[0]>, <-Abs[10],-Abs[2],-Abs[1]>, <-Abs[10],-Abs[2],Abs[1]>, <-Abs[10],Abs[2],-Abs[1]>, <-Abs[10],Abs[2],Abs[1]>, <-Abs[9],-Abs[5],-Abs[0]>, <-Abs[9],-Abs[5],Abs[0]>, <-Abs[9],Abs[5],-Abs[0]>, <-Abs[9],Abs[5],Abs[0]>, <-Abs[8],-Abs[3],-Abs[4]>, <-Abs[8],-Abs[3],Abs[4]>, <-Abs[8],Abs[3],-Abs[4]>, <-Abs[8],Abs[3],Abs[4]>, <-Abs[7],-Abs[6],-Abs[2]>, <-Abs[7],-Abs[6],Abs[2]>, <-Abs[7],Abs[6],-Abs[2]>, <-Abs[7],Abs[6],Abs[2]>, <-Abs[6],-Abs[2],-Abs[7]>, <-Abs[6],-Abs[2],Abs[7]>, <-Abs[6],Abs[2],-Abs[7]>, <-Abs[6],Abs[2],Abs[7]>, <-Abs[5],-Abs[0],-Abs[9]>, <-Abs[5],-Abs[0],Abs[9]>, <-Abs[5],Abs[0],-Abs[9]>, <-Abs[5],Abs[0],Abs[9]>, <-Abs[4],-Abs[8],-Abs[3]>, <-Abs[4],-Abs[8],Abs[3]>, <-Abs[4],Abs[8],-Abs[3]>, <-Abs[4],Abs[8],Abs[3]>, <-Abs[3],-Abs[4],-Abs[8]>, <-Abs[3],-Abs[4],Abs[8]>, <-Abs[3],Abs[4],-Abs[8]>, <-Abs[3],Abs[4],Abs[8]>, <-Abs[2],-Abs[7],-Abs[6]>, <-Abs[2],-Abs[7],Abs[6]>, <-Abs[2],-Abs[1],-Abs[10]>, <-Abs[2],-Abs[1],Abs[10]>, <-Abs[2],Abs[1],-Abs[10]>, <-Abs[2],Abs[1],Abs[10]>, <-Abs[2],Abs[7],-Abs[6]>, <-Abs[2],Abs[7],Abs[6]>, <-Abs[1],-Abs[10],-Abs[2]>, <-Abs[1],-Abs[10],Abs[2]>, <-Abs[1],Abs[10],-Abs[2]>, <-Abs[1],Abs[10],Abs[2]>, <-Abs[0],-Abs[11],-Abs[0]>, <-Abs[0],-Abs[11],Abs[0]>, <-Abs[0],-Abs[9],-Abs[5]>, <-Abs[0],-Abs[9],Abs[5]>, <-Abs[0],-Abs[0],-Abs[11]>, <-Abs[0],-Abs[0],Abs[11]>, <-Abs[0],Abs[0],-Abs[11]>, <-Abs[0],Abs[0],Abs[11]>, <-Abs[0],Abs[9],-Abs[5]>, <-Abs[0],Abs[9],Abs[5]>, <-Abs[0],Abs[11],-Abs[0]>, <-Abs[0],Abs[11],Abs[0]>, <Abs[0],-Abs[11],-Abs[0]>, <Abs[0],-Abs[11],Abs[0]>, <Abs[0],-Abs[9],-Abs[5]>, <Abs[0],-Abs[9],Abs[5]>, <Abs[0],-Abs[0],-Abs[11]>, <Abs[0],-Abs[0],Abs[11]>, <Abs[0],Abs[0],-Abs[11]>, <Abs[0],Abs[0],Abs[11]>, <Abs[0],Abs[9],-Abs[5]>, <Abs[0],Abs[9],Abs[5]>, <Abs[0],Abs[11],-Abs[0]>, <Abs[0],Abs[11],Abs[0]>, <Abs[1],-Abs[10],-Abs[2]>, <Abs[1],-Abs[10],Abs[2]>, <Abs[1],Abs[10],-Abs[2]>, <Abs[1],Abs[10],Abs[2]>, <Abs[2],-Abs[7],-Abs[6]>, <Abs[2],-Abs[7],Abs[6]>, <Abs[2],-Abs[1],-Abs[10]>, <Abs[2],-Abs[1],Abs[10]>, <Abs[2],Abs[1],-Abs[10]>, <Abs[2],Abs[1],Abs[10]>, <Abs[2],Abs[7],-Abs[6]>, <Abs[2],Abs[7],Abs[6]>, <Abs[3],-Abs[4],-Abs[8]>, <Abs[3],-Abs[4],Abs[8]>, <Abs[3],Abs[4],-Abs[8]>, <Abs[3],Abs[4],Abs[8]>, <Abs[4],-Abs[8],-Abs[3]>, <Abs[4],-Abs[8],Abs[3]>, <Abs[4],Abs[8],-Abs[3]>, <Abs[4],Abs[8],Abs[3]>, <Abs[5],-Abs[0],-Abs[9]>, <Abs[5],-Abs[0],Abs[9]>, <Abs[5],Abs[0],-Abs[9]>, <Abs[5],Abs[0],Abs[9]>, <Abs[6],-Abs[2],-Abs[7]>, <Abs[6],-Abs[2],Abs[7]>, <Abs[6],Abs[2],-Abs[7]>, <Abs[6],Abs[2],Abs[7]>, <Abs[7],-Abs[6],-Abs[2]>, <Abs[7],-Abs[6],Abs[2]>, <Abs[7],Abs[6],-Abs[2]>, <Abs[7],Abs[6],Abs[2]>, <Abs[8],-Abs[3],-Abs[4]>, <Abs[8],-Abs[3],Abs[4]>, <Abs[8],Abs[3],-Abs[4]>, <Abs[8],Abs[3],Abs[4]>, <Abs[9],-Abs[5],-Abs[0]>, <Abs[9],-Abs[5],Abs[0]>, <Abs[9],Abs[5],-Abs[0]>, <Abs[9],Abs[5],Abs[0]>, <Abs[10],-Abs[2],-Abs[1]>, <Abs[10],-Abs[2],Abs[1]>, <Abs[10],Abs[2],-Abs[1]>, <Abs[10],Abs[2],Abs[1]>, <Abs[11],-Abs[0],-Abs[0]>, <Abs[11],-Abs[0],Abs[0]>, <Abs[11],Abs[0],-Abs[0]>, <Abs[11],Abs[0],Abs[0]>, }

#declare FaceNormalPoints = array[62]{<(-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*GreatFactor, <sqrt(5)*(1 + sqrt(5))/2, 0, sqrt(5)>*GreatFactor, <-sqrt(5), -5/2 - sqrt(5)/2, 0>*GreatFactor, <(-1 + sqrt(5))*(sqrt(5)/4 + 5/4), -5/2 - sqrt(5)/2, 0>*GreatFactor, <(-1 + sqrt(5))*(sqrt(5)/4 + 5/4), sqrt(5)/2 + 5/2, 0>*GreatFactor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <0, (-7/4 - 3*sqrt(5)/4)*(-1 + sqrt(5)), 2*(-2 + sqrt(5))*(-7/4 - 3*sqrt(5)/4)>*GreatFactor, <(-3 + sqrt(5))*(3*sqrt(5)/4 + 7/4), (-sqrt(5) + 3)*(3*sqrt(5)/4 + 7/4), (-3 + sqrt(5))*(3*sqrt(5)/4 + 7/4)>*GreatFactor, <0, (-3*sqrt(5)/4 + 5/4)*(sqrt(5) + 3), 2*(2 + sqrt(5))*(-3*sqrt(5)/4 + 5/4)>*GreatFactor, <4*(-sqrt(5) + 2)*(3*sqrt(5)/8 + 7/8), 0, 2*(-sqrt(5) + 1)*(3*sqrt(5)/8 + 7/8)>*GreatFactor, <0, 2*(-1 + sqrt(5))*(sqrt(5)/8 + 5/8), -5/2 - sqrt(5)/2>*GreatFactor, <-sqrt(5)*(1 + sqrt(5))/2, 0, -sqrt(5)>*GreatFactor, <0, (-3*sqrt(5)/4 + 5/4)*(sqrt(5) + 3), -2*(2 + sqrt(5))*(-3*sqrt(5)/4 + 5/4)>*GreatFactor, <2*sqrt(5)*(1/4 + sqrt(5)/4), 0, (-5 + sqrt(5))*(1/4 + sqrt(5)/4)>*GreatFactor, <0, 0, 2*(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <4*(-2 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <2*(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 2), 0, (-7/4 - 3*sqrt(5)/4)*(-1 + sqrt(5))>*GreatFactor, <0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1), 4*(-2 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*GreatFactor, <(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4)>*GreatFactor, <0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2)>*GreatFactor, <-sqrt(5)*(1 + sqrt(5))/2, 0, sqrt(5)>*GreatFactor, <(-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3)>*GreatFactor, <0, 2*(-1 + sqrt(5))*(sqrt(5)/8 + 5/8), sqrt(5)/2 + 5/2>*GreatFactor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*GreatFactor, <0, 0, 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*GreatFactor, <2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*GreatFactor, <(-1 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 2*(-sqrt(5) + 2)*(3*sqrt(5)/4 + 7/4), 0>*GreatFactor, <(-sqrt(5) + 1)*(3*sqrt(5)/4 + 7/4), 2*(-sqrt(5) + 2)*(3*sqrt(5)/4 + 7/4), 0>*GreatFactor, <2*(-sqrt(5) + 3)*(3*sqrt(5)/8 + 7/8), 2*(-3 + sqrt(5))*(3*sqrt(5)/8 + 7/8), 2*(-3 + sqrt(5))*(3*sqrt(5)/8 + 7/8)>*GreatFactor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*GreatFactor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*GreatFactor, <0, 2*(-1 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2)>*GreatFactor, <(-1 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 2*(-2 + sqrt(5))*(3*sqrt(5)/4 + 7/4), 0>*GreatFactor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2)>*GreatFactor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <0, 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 0>*GreatFactor, <(-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4), (-3 + sqrt(5))*(-7/4 - 3*sqrt(5)/4), (-7/4 - 3*sqrt(5)/4)*(-sqrt(5) + 3)>*GreatFactor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 0, 0>*GreatFactor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*GreatFactor, <(-sqrt(5) + 1)*(sqrt(5)/4 + 5/4), sqrt(5)/2 + 5/2, 0>*GreatFactor, <4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2), 0, 2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4), 3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4), 3*(-3 + sqrt(5))*(-7/12 - sqrt(5)/4)>*GreatFactor, <(-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5))>*GreatFactor, <2*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 2*(-3 + sqrt(5))*(-7/8 - 3*sqrt(5)/8)>*GreatFactor, <(-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*GreatFactor, <2*(-1 + sqrt(5))*(-7/8 - 3*sqrt(5)/8), 4*(-7/8 - 3*sqrt(5)/8)*(-sqrt(5) + 2), 0>*GreatFactor, <2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*GreatFactor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-1 + sqrt(5)), (-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8)>*GreatFactor, <2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3)>*GreatFactor, <(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <0, 2*(-3 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), 0>*GreatFactor, <(-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8), (-1 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <2*(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 0, 0>*GreatFactor, <(-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <(-3 + sqrt(5))*(5*sqrt(5)/8 + 13/8), 2*(-sqrt(5) + 2)*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8)>*GreatFactor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 2), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <(-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 3), 2*(-2 + sqrt(5))*(-13/8 - 5*sqrt(5)/8), (-13/8 - 5*sqrt(5)/8)*(-sqrt(5) + 1)>*GreatFactor, <(-sqrt(5) + 1)*(5*sqrt(5)/8 + 13/8), (-sqrt(5) + 3)*(5*sqrt(5)/8 + 13/8), 2*(-2 + sqrt(5))*(5*sqrt(5)/8 + 13/8)>*GreatFactor};

#declare Faces = array[62]{array[5]{P[10], P[18], P[14], P[6], P[10]}, array[11]{P[105], P[97], P[93], P[95], P[99], P[107], P[115], P[119], P[117], P[113], P[105]}, array[11]{P[16], P[8], P[9], P[17], P[29], P[45], P[49], P[48], P[44], P[28], P[16]}, array[11]{P[73], P[89], P[101], P[109], P[108], P[100], P[88], P[72], P[60], P[61], P[73]}, array[11]{P[102], P[110], P[111], P[103], P[91], P[75], P[71], P[70], P[74], P[90], P[102]}, array[5]{P[97], P[93], P[79], P[85], P[97]}, array[7]{P[44], P[50], P[62], P[72], P[60], P[48], P[44]}, array[7]{P[30], P[18], P[14], P[22], P[34], P[42], P[30]}, array[11]{P[84], P[76], P[62], P[50], P[36], P[32], P[38], P[52], P[64], P[78], P[84]}, array[7]{P[52], P[38], P[24], P[26], P[40], P[54], P[52]}, array[11]{P[34], P[40], P[54], P[66], P[80], P[86], P[82], P[68], P[56], P[42], P[34]}, array[11]{P[4], P[0], P[2], P[6], P[14], P[22], P[26], P[24], P[20], P[12], P[4]}, array[11]{P[37], P[51], P[63], P[77], P[85], P[79], P[65], P[53], P[39], P[33], P[37]}, array[11]{P[112], P[104], P[96], P[92], P[94], P[98], P[106], P[114], P[118], P[116], P[112]}, array[5]{P[67], P[65], P[53], P[55], P[67]}, array[5]{P[8], P[4], P[12], P[16], P[8]}, array[7]{P[55], P[41], P[27], P[25], P[39], P[53], P[55]}, array[7]{P[92], P[78], P[64], P[66], P[80], P[94], P[92]}, array[7]{P[68], P[56], P[46], P[58], P[70], P[74], P[68]}, array[7]{P[17], P[13], P[21], P[33], P[37], P[29], P[17]}, array[7]{P[47], P[59], P[71], P[75], P[69], P[57], P[47]}, array[11]{P[5], P[13], P[21], P[25], P[27], P[23], P[15], P[7], P[3], P[1], P[5]}, array[7]{P[36], P[32], P[20], P[12], P[16], P[28], P[36]}, array[11]{P[43], P[57], P[69], P[83], P[87], P[81], P[67], P[55], P[41], P[35], P[43]}, array[5]{P[110], P[114], P[106], P[102], P[110]}, array[5]{P[64], P[52], P[54], P[66], P[64]}, array[7]{P[101], P[89], P[77], P[85], P[97], P[105], P[101]}, array[7]{P[113], P[109], P[108], P[112], P[116], P[117], P[113]}, array[7]{P[1], P[0], P[4], P[8], P[9], P[5], P[1]}, array[7]{P[76], P[88], P[100], P[104], P[96], P[84], P[76]}, array[5]{P[77], P[63], P[73], P[89], P[77]}, array[5]{P[28], P[36], P[50], P[44], P[28]}, array[7]{P[63], P[51], P[45], P[49], P[61], P[73], P[63]}, array[7]{P[118], P[114], P[110], P[111], P[115], P[119], P[118]}, array[5]{P[105], P[101], P[109], P[113], P[105]}, array[5]{P[9], P[5], P[13], P[17], P[9]}, array[5]{P[48], P[60], P[61], P[49], P[48]}, array[7]{P[98], P[86], P[82], P[90], P[102], P[106], P[98]}, array[5]{P[0], P[2], P[3], P[1], P[0]}, array[5]{P[82], P[68], P[74], P[90], P[82]}, array[11]{P[11], P[19], P[31], P[47], P[59], P[58], P[46], P[30], P[18], P[10], P[11]}, array[7]{P[81], P[67], P[65], P[79], P[93], P[95], P[81]}, array[7]{P[103], P[107], P[99], P[87], P[83], P[91], P[103]}, array[5]{P[40], P[34], P[22], P[26], P[40]}, array[5]{P[84], P[78], P[92], P[96], P[84]}, array[7]{P[19], P[15], P[23], P[35], P[43], P[31], P[19]}, array[5]{P[103], P[107], P[115], P[111], P[103]}, array[5]{P[76], P[62], P[72], P[88], P[76]}, array[7]{P[10], P[6], P[2], P[3], P[7], P[11], P[10]}, array[5]{P[69], P[75], P[91], P[83], P[69]}, array[5]{P[37], P[29], P[45], P[51], P[37]}, array[5]{P[30], P[46], P[56], P[42], P[30]}, array[5]{P[99], P[87], P[81], P[95], P[99]}, array[5]{P[59], P[58], P[70], P[71], P[59]}, array[5]{P[100], P[104], P[112], P[108], P[100]}, array[5]{P[31], P[47], P[57], P[43], P[31]}, array[5]{P[119], P[118], P[116], P[117], P[119]}, array[5]{P[86], P[80], P[94], P[98], P[86]}, array[5]{P[38], P[24], P[20], P[32], P[38]}, array[5]{P[23], P[35], P[41], P[27], P[23]}, array[5]{P[25], P[39], P[33], P[21], P[25]}, array[5]{P[19], P[15], P[7], P[11], P[19]}};

#declare OuterSolid = object{
    SolidFromFaceNormalPoints(FaceNormalPoints, 0)
    pigment{ color GreatDark }
}

#declare InnerSolid = object{
    SolidFromFaceNormalPoints(FaceNormalPoints, FaceOffset)
    pigment{ color GreatLight }
}

#declare Hollow = difference{ object{OuterSolid} object{InnerSolid} }

#declare PrismUnion = union{
    #for(Index, 0, dimension_size(Faces, 1)-1)
        SolidPrismFromVerticesOfPolygon(Faces[Index], EdgeOffset, PrismThickness)
    #end
    pigment{ color GreatLight }
}

#declare Davinci = difference{ object{Hollow} object{PrismUnion} }
object{ Davinci }



scale .56
}

